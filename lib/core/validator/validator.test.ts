// tslint:disable-next-line: no-implicit-dependencies
import mock = require('mock-fs');
import {
  validateEmail,
  validatePassword,
  validatePdfFile,
  validatePhoneNumber,
} from './validator';

describe('ValidateEmail test', () => {
  it('should return true for valid email address', () => {
    expect(validateEmail('validEmail@test.de')).toBe(true);
  });

  it('should return false for invalid email', () => {
    expect(() => {
      validateEmail('invalidEmail');
    }).toThrowError(new Error('Invalid email'));

    expect(() => {
      validateEmail('@test.de');
    }).toThrowError(new Error('Invalid email'));

    expect(() => {
      validateEmail('@');
    }).toThrowError(new Error('Invalid email'));

    expect(() => {
      validateEmail(' ');
    }).toThrowError(new Error('Invalid email'));

    expect(() => {
      validateEmail('');
    }).toThrowError(new Error('Invalid email'));
  });
});

describe('ValidatePassword', () => {
  it('should return true for valid password', () => {
    expect(validatePassword('validPassword')).toBe(true);
  });
});

describe('Phone validation', () => {
  test('valid phone number numbers', () => {
    expect(validatePhoneNumber('015739777777')).toBeTruthy();
  });

  test('valid phone number +numbers', () => {
    expect(validatePhoneNumber('+4915739777777')).toBeTruthy();
  });

  test('invalid phone number text', () => {
    expect(() => validatePhoneNumber('text')).toThrow(
      new Error('Invalid Phone Number'),
    );
  });

  test('invalid phone number empty', () => {
    expect(() => validatePhoneNumber('')).toThrow(
      new Error('Invalid Phone Number'),
    );
  });
});

describe('PDF file validation', () => {
  beforeAll(() => {
    mock({
      'path/to/invalid.pdf': '',
      'path/to/unreadable.pdf': mock.file({ content: '', mode: Number(0o111) }),
      // prettier-ignore
      'path/to/valid.pdf': Buffer.from([37, 80, 68, 70, 45, 49, 46, 52, 10, 37, 195, 164, 195, 188, 195, 182, 195, 159, 10, 50, 32, 48, 32, 111, 98, 106, 10, 60, 60, 47, 76, 101, 110, 103, 116, 104, 32, 51, 32, 48, 32, 82, 47, 70, 105, 108, 116, 101, 114, 47, 70, 108, 97, 116, 101, 68, 101, 99, 111, 100, 101, 62, 62, 10, 115, 116, 114, 101, 97, 109, 10, 120, 156, 51, 208, 51, 84, 40, 231, 42, 84, 48, 0, 66, 51, 67, 35, 5, 115, 75, 35, 133, 162, 84, 174, 112, 45, 133, 60, 174, 64, 5, 0, 95, 170, 6, 72, 10, 101, 110, 100, 115, 116, 114, 101, 97, 109, 10, 101, 110, 100, 111, 98, 106, 10, 10, 51, 32, 48, 32, 111, 98, 106, 10, 51, 54, 10, 101, 110, 100, 111, 98, 106, 10, 10, 53, 32, 48, 32, 111, 98, 106, 10, 60, 60, 10, 62, 62, 10, 101, 110, 100, 111, 98, 106, 10, 10, 54, 32, 48, 32, 111, 98, 106, 10, 60, 60, 47, 70, 111, 110, 116, 32, 53, 32, 48, 32, 82, 10, 47, 80, 114, 111, 99, 83, 101, 116, 91, 47, 80, 68, 70, 47, 84, 101, 120, 116, 93, 10, 62, 62, 10, 101, 110, 100, 111, 98, 106, 10, 10, 49, 32, 48, 32, 111, 98, 106, 10, 60, 60, 47, 84, 121, 112, 101, 47, 80, 97, 103, 101, 47, 80, 97, 114, 101, 110, 116, 32, 52, 32, 48, 32, 82, 47, 82, 101, 115, 111, 117, 114, 99, 101, 115, 32, 54, 32, 48, 32, 82, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 54, 49, 49, 46, 57, 55, 49, 54, 53, 51, 53, 52, 51, 51, 48, 55, 32, 55, 57, 49, 46, 57, 55, 49, 54, 53, 51, 53, 52, 51, 51, 48, 55, 93, 47, 71, 114, 111, 117, 112, 60, 60, 47, 83, 47, 84, 114, 97, 110, 115, 112, 97, 114, 101, 110, 99, 121, 47, 67, 83, 47, 68, 101, 118, 105, 99, 101, 82, 71, 66, 47, 73, 32, 116, 114, 117, 101, 62, 62, 47, 67, 111, 110, 116, 101, 110, 116, 115, 32, 50, 32, 48, 32, 82, 62, 62, 10, 101, 110, 100, 111, 98, 106, 10, 10, 52, 32, 48, 32, 111, 98, 106, 10, 60, 60, 47, 84, 121, 112, 101, 47, 80, 97, 103, 101, 115, 10, 47, 82, 101, 115, 111, 117, 114, 99, 101, 115, 32, 54, 32, 48, 32, 82, 10, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 32, 48, 32, 48, 32, 54, 49, 49, 32, 55, 57, 49, 32, 93, 10, 47, 75, 105, 100, 115, 91, 32, 49, 32, 48, 32, 82, 32, 93, 10, 47, 67, 111, 117, 110, 116, 32, 49, 62, 62, 10, 101, 110, 100, 111, 98, 106, 10, 10, 55, 32, 48, 32, 111, 98, 106, 10, 60, 60, 47, 84, 121, 112, 101, 47, 67, 97, 116, 97, 108, 111, 103, 47, 80, 97, 103, 101, 115, 32, 52, 32, 48, 32, 82, 10, 47, 79, 112, 101, 110, 65, 99, 116, 105, 111, 110, 91, 49, 32, 48, 32, 82, 32, 47, 88, 89, 90, 32, 110, 117, 108, 108, 32, 110, 117, 108, 108, 32, 48, 93, 10, 47, 76, 97, 110, 103, 40, 101, 110, 45, 85, 83, 41, 10, 62, 62, 10, 101, 110, 100, 111, 98, 106, 10, 10, 56, 32, 48, 32, 111, 98, 106, 10, 60, 60, 47, 67, 114, 101, 97, 116, 111, 114, 60, 70, 69, 70, 70, 48, 48, 53, 55, 48, 48, 55, 50, 48, 48, 54, 57, 48, 48, 55, 52, 48, 48, 54, 53, 48, 48, 55, 50, 62, 10, 47, 80, 114, 111, 100, 117, 99, 101, 114, 60, 70, 69, 70, 70, 48, 48, 52, 67, 48, 48, 54, 57, 48, 48, 54, 50, 48, 48, 55, 50, 48, 48, 54, 53, 48, 48, 52, 70, 48, 48, 54, 54, 48, 48, 54, 54, 48, 48, 54, 57, 48, 48, 54, 51, 48, 48, 54, 53, 48, 48, 50, 48, 48, 48, 51, 54, 48, 48, 50, 69, 48, 48, 51, 48, 62, 10, 47, 67, 114, 101, 97, 116, 105, 111, 110, 68, 97, 116, 101, 40, 68, 58, 50, 48, 49, 57, 48, 56, 50, 48, 49, 50, 53, 48, 52, 56, 43, 48, 50, 39, 48, 48, 39, 41, 62, 62, 10, 101, 110, 100, 111, 98, 106, 10, 10, 120, 114, 101, 102, 10, 48, 32, 57, 10, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 32, 54, 53, 53, 51, 53, 32, 102, 32, 10, 48, 48, 48, 48, 48, 48, 48, 50, 50, 48, 32, 48, 48, 48, 48, 48, 32, 110, 32, 10, 48, 48, 48, 48, 48, 48, 48, 48, 49, 57, 32, 48, 48, 48, 48, 48, 32, 110, 32, 10, 48, 48, 48, 48, 48, 48, 48, 49, 50, 54, 32, 48, 48, 48, 48, 48, 32, 110, 32, 10, 48, 48, 48, 48, 48, 48, 48, 51, 56, 56, 32, 48, 48, 48, 48, 48, 32, 110, 32, 10, 48, 48, 48, 48, 48, 48, 48, 49, 52, 53, 32, 48, 48, 48, 48, 48, 32, 110, 32, 10, 48, 48, 48, 48, 48, 48, 48, 49, 54, 55, 32, 48, 48, 48, 48, 48, 32, 110, 32, 10, 48, 48, 48, 48, 48, 48, 48, 52, 56, 54, 32, 48, 48, 48, 48, 48, 32, 110, 32, 10, 48, 48, 48, 48, 48, 48, 48, 53, 56, 50, 32, 48, 48, 48, 48, 48, 32, 110, 32, 10, 116, 114, 97, 105, 108, 101, 114, 10, 60, 60, 47, 83, 105, 122, 101, 32, 57, 47, 82, 111, 111, 116, 32, 55, 32, 48, 32, 82, 10, 47, 73, 110, 102, 111, 32, 56, 32, 48, 32, 82, 10, 47, 73, 68, 32, 91, 32, 60, 57, 48, 53, 56, 57, 48, 65, 57, 67, 68, 69, 52, 56, 53, 55, 55, 68, 52, 48, 67, 57, 52, 68, 65, 51, 54, 52, 52, 55, 65, 54, 56, 62, 10, 60, 57, 48, 53, 56, 57, 48, 65, 57, 67, 68, 69, 52, 56, 53, 55, 55, 68, 52, 48, 67, 57, 52, 68, 65, 51, 54, 52, 52, 55, 65, 54, 56, 62, 32, 93, 10, 47, 68, 111, 99, 67, 104, 101, 99, 107, 115, 117, 109, 32, 47, 55, 69, 48, 67, 69, 66, 50, 50, 55, 69, 69, 68, 66, 56, 49, 66, 56, 69, 65, 51, 69, 68, 54, 70, 56, 68, 67, 54, 53, 53, 57, 55, 10, 62, 62, 10, 115, 116, 97, 114, 116, 120, 114, 101, 102, 10, 55, 53, 54, 10, 37, 37, 69, 79, 70, 10])
    });
  });

  afterAll(mock.restore);

  test('should not throw an error if pdf file is valid', () => {
    expect(() => {
      validatePdfFile('./path/to/valid.pdf');
    }).not.toThrowError();
  });

  test('should throw an error if file does not exist', () => {
    expect(() => {
      validatePdfFile('./path/to/missing.pdf');
    }).toThrowError('File does not exist');
  });

  test('should throw an error if mime type is non valid', () => {
    expect(() => {
      validatePdfFile('./path/to/invalid.pdf');
    }).toThrowError('Invalid pdf extension');
  });

  test('should throw an error if file is not readable', () => {
    expect(() => {
      validatePdfFile('./path/to/unreadable.pdf');
    }).toThrowError('File is unreadable');
  });
});
